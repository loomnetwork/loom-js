/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface ValidatorManagerV2Interface extends Interface {
  functions: {
    validators: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    loomAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    powers: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    threshold_denom: TypedFunctionDescription<{ encode([]: []): string }>;

    nonce: TypedFunctionDescription<{ encode([]: []): string }>;

    threshold_num: TypedFunctionDescription<{ encode([]: []): string }>;

    totalPower: TypedFunctionDescription<{ encode([]: []): string }>;

    getPowers: TypedFunctionDescription<{ encode([]: []): string }>;

    getValidators: TypedFunctionDescription<{ encode([]: []): string }>;

    setLoom: TypedFunctionDescription<{
      encode([_loomAddress, _signersIndexes, _v, _r, _s]: [
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish[],
        Arrayish[]
      ]): string;
    }>;

    setQuorum: TypedFunctionDescription<{
      encode([_num, _denom, _signersIndexes, _v, _r, _s]: [
        BigNumberish,
        BigNumberish,
        BigNumberish[],
        BigNumberish[],
        Arrayish[],
        Arrayish[]
      ]): string;
    }>;

    rotateValidators: TypedFunctionDescription<{
      encode([_newValidators, _newPowers, _signersIndexes, _v, _r, _s]: [
        string[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        Arrayish[],
        Arrayish[]
      ]): string;
    }>;

    signedByValidator: TypedFunctionDescription<{
      encode([_message, _signersIndex, _v, _r, _s]: [
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    checkThreshold: TypedFunctionDescription<{
      encode([_message, _signersIndexes, _v, _r, _s]: [
        Arrayish,
        BigNumberish[],
        BigNumberish[],
        Arrayish[],
        Arrayish[]
      ]): string;
    }>;
  };

  events: {
    ValidatorSetChanged: TypedEventDescription<{
      encodeTopics([_validators, _powers]: [null, null]): string[];
    }>;
  };
}

export class ValidatorManagerV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ValidatorManagerV2;
  attach(addressOrName: string): ValidatorManagerV2;
  deployed(): Promise<ValidatorManagerV2>;

  on(event: EventFilter | string, listener: Listener): ValidatorManagerV2;
  once(event: EventFilter | string, listener: Listener): ValidatorManagerV2;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ValidatorManagerV2;
  removeAllListeners(eventName: EventFilter | string): ValidatorManagerV2;
  removeListener(eventName: any, listener: Listener): ValidatorManagerV2;

  interface: ValidatorManagerV2Interface;

  functions: {
    validators(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "validators(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    loomAddress(overrides?: UnsignedTransaction): Promise<string>;

    "loomAddress()"(overrides?: UnsignedTransaction): Promise<string>;

    powers(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "powers(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    threshold_denom(overrides?: UnsignedTransaction): Promise<number>;

    "threshold_denom()"(overrides?: UnsignedTransaction): Promise<number>;

    nonce(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonce()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    threshold_num(overrides?: UnsignedTransaction): Promise<number>;

    "threshold_num()"(overrides?: UnsignedTransaction): Promise<number>;

    totalPower(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalPower()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getPowers(overrides?: UnsignedTransaction): Promise<BigNumber[]>;

    "getPowers()"(overrides?: UnsignedTransaction): Promise<BigNumber[]>;

    getValidators(overrides?: UnsignedTransaction): Promise<string[]>;

    "getValidators()"(overrides?: UnsignedTransaction): Promise<string[]>;

    setLoom(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setLoom(address,uint256[],uint8[],bytes32[],bytes32[])"(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setQuorum(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setQuorum(uint8,uint8,uint256[],uint8[],bytes32[],bytes32[])"(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    rotateValidators(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "rotateValidators(address[],uint64[],uint256[],uint8[],bytes32[],bytes32[])"(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    signedByValidator(
      _message: Arrayish,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: Arrayish,
      _s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<void>;

    "signedByValidator(bytes32,uint256,uint8,bytes32,bytes32)"(
      _message: Arrayish,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: Arrayish,
      _s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<void>;

    checkThreshold(
      _message: Arrayish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<void>;

    "checkThreshold(bytes32,uint256[],uint8[],bytes32[],bytes32[])"(
      _message: Arrayish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<void>;
  };

  validators(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "validators(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  loomAddress(overrides?: UnsignedTransaction): Promise<string>;

  "loomAddress()"(overrides?: UnsignedTransaction): Promise<string>;

  powers(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "powers(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  threshold_denom(overrides?: UnsignedTransaction): Promise<number>;

  "threshold_denom()"(overrides?: UnsignedTransaction): Promise<number>;

  nonce(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "nonce()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  threshold_num(overrides?: UnsignedTransaction): Promise<number>;

  "threshold_num()"(overrides?: UnsignedTransaction): Promise<number>;

  totalPower(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "totalPower()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getPowers(overrides?: UnsignedTransaction): Promise<BigNumber[]>;

  "getPowers()"(overrides?: UnsignedTransaction): Promise<BigNumber[]>;

  getValidators(overrides?: UnsignedTransaction): Promise<string[]>;

  "getValidators()"(overrides?: UnsignedTransaction): Promise<string[]>;

  setLoom(
    _loomAddress: string,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setLoom(address,uint256[],uint8[],bytes32[],bytes32[])"(
    _loomAddress: string,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setQuorum(
    _num: BigNumberish,
    _denom: BigNumberish,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setQuorum(uint8,uint8,uint256[],uint8[],bytes32[],bytes32[])"(
    _num: BigNumberish,
    _denom: BigNumberish,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  rotateValidators(
    _newValidators: string[],
    _newPowers: BigNumberish[],
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "rotateValidators(address[],uint64[],uint256[],uint8[],bytes32[],bytes32[])"(
    _newValidators: string[],
    _newPowers: BigNumberish[],
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  signedByValidator(
    _message: Arrayish,
    _signersIndex: BigNumberish,
    _v: BigNumberish,
    _r: Arrayish,
    _s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<void>;

  "signedByValidator(bytes32,uint256,uint8,bytes32,bytes32)"(
    _message: Arrayish,
    _signersIndex: BigNumberish,
    _v: BigNumberish,
    _r: Arrayish,
    _s: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<void>;

  checkThreshold(
    _message: Arrayish,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<void>;

  "checkThreshold(bytes32,uint256[],uint8[],bytes32[],bytes32[])"(
    _message: Arrayish,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<void>;

  filters: {
    ValidatorSetChanged(_validators: null, _powers: null): EventFilter;
  };

  estimate: {
    validators(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "validators(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    loomAddress(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "loomAddress()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    powers(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "powers(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    threshold_denom(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "threshold_denom()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    nonce(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonce()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    threshold_num(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "threshold_num()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    totalPower(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalPower()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getPowers(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getPowers()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getValidators(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getValidators()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    setLoom(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setLoom(address,uint256[],uint8[],bytes32[],bytes32[])"(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setQuorum(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setQuorum(uint8,uint8,uint256[],uint8[],bytes32[],bytes32[])"(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    rotateValidators(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "rotateValidators(address[],uint64[],uint256[],uint8[],bytes32[],bytes32[])"(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    signedByValidator(
      _message: Arrayish,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: Arrayish,
      _s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "signedByValidator(bytes32,uint256,uint8,bytes32,bytes32)"(
      _message: Arrayish,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: Arrayish,
      _s: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    checkThreshold(
      _message: Arrayish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "checkThreshold(bytes32,uint256[],uint8[],bytes32[],bytes32[])"(
      _message: Arrayish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
