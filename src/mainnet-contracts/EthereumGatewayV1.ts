/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EthereumGatewayV1Interface extends utils.Interface {
  functions: {
    "toggleToken(address)": FunctionFragment;
    "withdrawERC20(uint256,bytes,address)": FunctionFragment;
    "loomAddress()": FunctionFragment;
    "depositERC20(uint256,address)": FunctionFragment;
    "getERC20(address)": FunctionFragment;
    "numValidators()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "checkValidator(address)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "allowAnyToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "addValidator(address,uint8[],bytes32[],bytes32[])": FunctionFragment;
    "nonce()": FunctionFragment;
    "removeValidator(address,uint8[],bytes32[],bytes32[])": FunctionFragment;
    "toggleAllowAnyToken(bool)": FunctionFragment;
    "allowedTokens(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawERC721X(uint256,uint256,bytes,address)": FunctionFragment;
    "withdrawERC721(uint256,bytes,address)": FunctionFragment;
    "withdrawETH(uint256,bytes)": FunctionFragment;
    "onERC721XReceived(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721XBatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "getETH()": FunctionFragment;
    "getERC721(uint256,address)": FunctionFragment;
    "getERC721X(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "toggleToken"
      | "withdrawERC20"
      | "loomAddress"
      | "depositERC20"
      | "getERC20"
      | "numValidators"
      | "renounceOwnership"
      | "checkValidator"
      | "nonces"
      | "allowAnyToken"
      | "owner"
      | "addValidator"
      | "nonce"
      | "removeValidator"
      | "toggleAllowAnyToken"
      | "allowedTokens"
      | "transferOwnership"
      | "withdrawERC721X"
      | "withdrawERC721"
      | "withdrawETH"
      | "onERC721XReceived"
      | "onERC721XBatchReceived"
      | "onERC721Received"
      | "getETH"
      | "getERC721"
      | "getERC721X"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "toggleToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "loomAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getERC20", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowAnyToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [string, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [string, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAllowAnyToken",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721X",
    values: [BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721XReceived",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721XBatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getERC721",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721X",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "toggleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loomAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowAnyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleAllowAnyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721X",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721XReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721XBatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getERC721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getERC721X", data: BytesLike): Result;

  events: {
    "ETHReceived(address,uint256)": EventFragment;
    "ERC721Received(address,address,uint256,address,bytes)": EventFragment;
    "ERC721XReceived(address,address,uint256,uint256,address,bytes)": EventFragment;
    "ERC721XBatchReceived(address,address,uint256[],uint256[],address,bytes)": EventFragment;
    "ERC20Received(address,uint256,address)": EventFragment;
    "TokenWithdrawn(address,uint8,address,uint256)": EventFragment;
    "LoomCoinReceived(address,uint256,address)": EventFragment;
    "AddedValidator(address)": EventFragment;
    "RemovedValidator(address)": EventFragment;
    "OwnershipRenounced(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ETHReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721XReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721XBatchReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoomCoinReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ETHReceivedEventObject {
  from: string;
  amount: BigNumber;
}
export type ETHReceivedEvent = TypedEvent<
  [string, BigNumber],
  ETHReceivedEventObject
>;

export type ETHReceivedEventFilter = TypedEventFilter<ETHReceivedEvent>;

export interface ERC721ReceivedEventObject {
  operator: string;
  from: string;
  tokenId: BigNumber;
  contractAddress: string;
  data: string;
}
export type ERC721ReceivedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  ERC721ReceivedEventObject
>;

export type ERC721ReceivedEventFilter = TypedEventFilter<ERC721ReceivedEvent>;

export interface ERC721XReceivedEventObject {
  operator: string;
  from: string;
  tokenId: BigNumber;
  amount: BigNumber;
  contractAddress: string;
  data: string;
}
export type ERC721XReceivedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string],
  ERC721XReceivedEventObject
>;

export type ERC721XReceivedEventFilter = TypedEventFilter<ERC721XReceivedEvent>;

export interface ERC721XBatchReceivedEventObject {
  operator: string;
  to: string;
  tokenTypes: BigNumber[];
  amounts: BigNumber[];
  contractAddress: string;
  data: string;
}
export type ERC721XBatchReceivedEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], string, string],
  ERC721XBatchReceivedEventObject
>;

export type ERC721XBatchReceivedEventFilter =
  TypedEventFilter<ERC721XBatchReceivedEvent>;

export interface ERC20ReceivedEventObject {
  from: string;
  amount: BigNumber;
  contractAddress: string;
}
export type ERC20ReceivedEvent = TypedEvent<
  [string, BigNumber, string],
  ERC20ReceivedEventObject
>;

export type ERC20ReceivedEventFilter = TypedEventFilter<ERC20ReceivedEvent>;

export interface TokenWithdrawnEventObject {
  owner: string;
  kind: number;
  contractAddress: string;
  value: BigNumber;
}
export type TokenWithdrawnEvent = TypedEvent<
  [string, number, string, BigNumber],
  TokenWithdrawnEventObject
>;

export type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>;

export interface LoomCoinReceivedEventObject {
  from: string;
  amount: BigNumber;
  loomCoinAddress: string;
}
export type LoomCoinReceivedEvent = TypedEvent<
  [string, BigNumber, string],
  LoomCoinReceivedEventObject
>;

export type LoomCoinReceivedEventFilter =
  TypedEventFilter<LoomCoinReceivedEvent>;

export interface AddedValidatorEventObject {
  validator: string;
}
export type AddedValidatorEvent = TypedEvent<
  [string],
  AddedValidatorEventObject
>;

export type AddedValidatorEventFilter = TypedEventFilter<AddedValidatorEvent>;

export interface RemovedValidatorEventObject {
  validator: string;
}
export type RemovedValidatorEvent = TypedEvent<
  [string],
  RemovedValidatorEventObject
>;

export type RemovedValidatorEventFilter =
  TypedEventFilter<RemovedValidatorEvent>;

export interface OwnershipRenouncedEventObject {
  previousOwner: string;
}
export type OwnershipRenouncedEvent = TypedEvent<
  [string],
  OwnershipRenouncedEventObject
>;

export type OwnershipRenouncedEventFilter =
  TypedEventFilter<OwnershipRenouncedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface EthereumGatewayV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthereumGatewayV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    toggleToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    loomAddress(overrides?: CallOverrides): Promise<[string]>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getERC20(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowAnyToken(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    addValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      uid: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getERC721(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getERC721X(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  toggleToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    amount: BigNumberish,
    sig: BytesLike,
    contractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  loomAddress(overrides?: CallOverrides): Promise<string>;

  depositERC20(
    amount: BigNumberish,
    contractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getERC20(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numValidators(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowAnyToken(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  addValidator(
    _validator: string,
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  removeValidator(
    _validator: string,
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  toggleAllowAnyToken(
    _allow: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawERC721X(
    tokenId: BigNumberish,
    amount: BigNumberish,
    sig: BytesLike,
    contractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    uid: BigNumberish,
    sig: BytesLike,
    contractAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawETH(
    amount: BigNumberish,
    sig: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC721XReceived(
    _operator: string,
    _from: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC721XBatchReceived(
    _operator: string,
    _from: string,
    _types: BigNumberish[],
    _amounts: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC721Received(
    _operator: string,
    _from: string,
    _uid: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getETH(overrides?: CallOverrides): Promise<BigNumber>;

  getERC721(
    uid: BigNumberish,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getERC721X(
    tokenId: BigNumberish,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    toggleToken(_token: string, overrides?: CallOverrides): Promise<void>;

    withdrawERC20(
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    loomAddress(overrides?: CallOverrides): Promise<string>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getERC20(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numValidators(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    checkValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowAnyToken(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    addValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    removeValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      uid: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(
      amount: BigNumberish,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getERC721(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getERC721X(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ETHReceived(address,uint256)"(
      from?: null,
      amount?: null
    ): ETHReceivedEventFilter;
    ETHReceived(from?: null, amount?: null): ETHReceivedEventFilter;

    "ERC721Received(address,address,uint256,address,bytes)"(
      operator?: null,
      from?: null,
      tokenId?: null,
      contractAddress?: null,
      data?: null
    ): ERC721ReceivedEventFilter;
    ERC721Received(
      operator?: null,
      from?: null,
      tokenId?: null,
      contractAddress?: null,
      data?: null
    ): ERC721ReceivedEventFilter;

    "ERC721XReceived(address,address,uint256,uint256,address,bytes)"(
      operator?: null,
      from?: null,
      tokenId?: null,
      amount?: null,
      contractAddress?: null,
      data?: null
    ): ERC721XReceivedEventFilter;
    ERC721XReceived(
      operator?: null,
      from?: null,
      tokenId?: null,
      amount?: null,
      contractAddress?: null,
      data?: null
    ): ERC721XReceivedEventFilter;

    "ERC721XBatchReceived(address,address,uint256[],uint256[],address,bytes)"(
      operator?: null,
      to?: null,
      tokenTypes?: null,
      amounts?: null,
      contractAddress?: null,
      data?: null
    ): ERC721XBatchReceivedEventFilter;
    ERC721XBatchReceived(
      operator?: null,
      to?: null,
      tokenTypes?: null,
      amounts?: null,
      contractAddress?: null,
      data?: null
    ): ERC721XBatchReceivedEventFilter;

    "ERC20Received(address,uint256,address)"(
      from?: null,
      amount?: null,
      contractAddress?: null
    ): ERC20ReceivedEventFilter;
    ERC20Received(
      from?: null,
      amount?: null,
      contractAddress?: null
    ): ERC20ReceivedEventFilter;

    "TokenWithdrawn(address,uint8,address,uint256)"(
      owner?: string | null,
      kind?: null,
      contractAddress?: null,
      value?: null
    ): TokenWithdrawnEventFilter;
    TokenWithdrawn(
      owner?: string | null,
      kind?: null,
      contractAddress?: null,
      value?: null
    ): TokenWithdrawnEventFilter;

    "LoomCoinReceived(address,uint256,address)"(
      from?: string | null,
      amount?: null,
      loomCoinAddress?: null
    ): LoomCoinReceivedEventFilter;
    LoomCoinReceived(
      from?: string | null,
      amount?: null,
      loomCoinAddress?: null
    ): LoomCoinReceivedEventFilter;

    "AddedValidator(address)"(validator?: null): AddedValidatorEventFilter;
    AddedValidator(validator?: null): AddedValidatorEventFilter;

    "RemovedValidator(address)"(validator?: null): RemovedValidatorEventFilter;
    RemovedValidator(validator?: null): RemovedValidatorEventFilter;

    "OwnershipRenounced(address)"(
      previousOwner?: string | null
    ): OwnershipRenouncedEventFilter;
    OwnershipRenounced(
      previousOwner?: string | null
    ): OwnershipRenouncedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    toggleToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawERC20(
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    loomAddress(overrides?: CallOverrides): Promise<BigNumber>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getERC20(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numValidators(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowAnyToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    addValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    removeValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawERC721(
      uid: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawETH(
      amount: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getERC721(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC721X(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    toggleToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    loomAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getERC20(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowAnyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      uid: BigNumberish,
      sig: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      amount: BigNumberish,
      sig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getERC721(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC721X(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
