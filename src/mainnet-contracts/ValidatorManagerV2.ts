/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ValidatorManagerV2Interface extends utils.Interface {
  functions: {
    "validators(uint256)": FunctionFragment;
    "loomAddress()": FunctionFragment;
    "powers(uint256)": FunctionFragment;
    "threshold_denom()": FunctionFragment;
    "nonce()": FunctionFragment;
    "threshold_num()": FunctionFragment;
    "totalPower()": FunctionFragment;
    "getPowers()": FunctionFragment;
    "getValidators()": FunctionFragment;
    "setLoom(address,uint256[],uint8[],bytes32[],bytes32[])": FunctionFragment;
    "setQuorum(uint8,uint8,uint256[],uint8[],bytes32[],bytes32[])": FunctionFragment;
    "rotateValidators(address[],uint64[],uint256[],uint8[],bytes32[],bytes32[])": FunctionFragment;
    "signedByValidator(bytes32,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "checkThreshold(bytes32,uint256[],uint8[],bytes32[],bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "validators"
      | "loomAddress"
      | "powers"
      | "threshold_denom"
      | "nonce"
      | "threshold_num"
      | "totalPower"
      | "getPowers"
      | "getValidators"
      | "setLoom"
      | "setQuorum"
      | "rotateValidators"
      | "signedByValidator"
      | "checkThreshold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "validators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loomAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "threshold_denom",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "threshold_num",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPower",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPowers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLoom",
    values: [string, BigNumberish[], BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateValidators",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedByValidator",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [
      BytesLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loomAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "powers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "threshold_denom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "threshold_num",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPowers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLoom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotateValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedByValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;

  events: {
    "ValidatorSetChanged(address[],uint64[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValidatorSetChanged"): EventFragment;
}

export interface ValidatorSetChangedEventObject {
  _validators: string[];
  _powers: BigNumber[];
}
export type ValidatorSetChangedEvent = TypedEvent<
  [string[], BigNumber[]],
  ValidatorSetChangedEventObject
>;

export type ValidatorSetChangedEventFilter =
  TypedEventFilter<ValidatorSetChangedEvent>;

export interface ValidatorManagerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorManagerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    validators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    loomAddress(overrides?: CallOverrides): Promise<[string]>;

    powers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    threshold_denom(overrides?: CallOverrides): Promise<[number]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    threshold_num(overrides?: CallOverrides): Promise<[number]>;

    totalPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPowers(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getValidators(overrides?: CallOverrides): Promise<[string[]]>;

    setLoom(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setQuorum(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rotateValidators(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    signedByValidator(
      _message: BytesLike,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkThreshold(
      _message: BytesLike,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  validators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  loomAddress(overrides?: CallOverrides): Promise<string>;

  powers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  threshold_denom(overrides?: CallOverrides): Promise<number>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  threshold_num(overrides?: CallOverrides): Promise<number>;

  totalPower(overrides?: CallOverrides): Promise<BigNumber>;

  getPowers(overrides?: CallOverrides): Promise<BigNumber[]>;

  getValidators(overrides?: CallOverrides): Promise<string[]>;

  setLoom(
    _loomAddress: string,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setQuorum(
    _num: BigNumberish,
    _denom: BigNumberish,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rotateValidators(
    _newValidators: string[],
    _newPowers: BigNumberish[],
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  signedByValidator(
    _message: BytesLike,
    _signersIndex: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  checkThreshold(
    _message: BytesLike,
    _signersIndexes: BigNumberish[],
    _v: BigNumberish[],
    _r: BytesLike[],
    _s: BytesLike[],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    validators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    loomAddress(overrides?: CallOverrides): Promise<string>;

    powers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    threshold_denom(overrides?: CallOverrides): Promise<number>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    threshold_num(overrides?: CallOverrides): Promise<number>;

    totalPower(overrides?: CallOverrides): Promise<BigNumber>;

    getPowers(overrides?: CallOverrides): Promise<BigNumber[]>;

    getValidators(overrides?: CallOverrides): Promise<string[]>;

    setLoom(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    setQuorum(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    rotateValidators(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    signedByValidator(
      _message: BytesLike,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkThreshold(
      _message: BytesLike,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ValidatorSetChanged(address[],uint64[])"(
      _validators?: null,
      _powers?: null
    ): ValidatorSetChangedEventFilter;
    ValidatorSetChanged(
      _validators?: null,
      _powers?: null
    ): ValidatorSetChangedEventFilter;
  };

  estimateGas: {
    validators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loomAddress(overrides?: CallOverrides): Promise<BigNumber>;

    powers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    threshold_denom(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    threshold_num(overrides?: CallOverrides): Promise<BigNumber>;

    totalPower(overrides?: CallOverrides): Promise<BigNumber>;

    getPowers(overrides?: CallOverrides): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    setLoom(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setQuorum(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rotateValidators(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    signedByValidator(
      _message: BytesLike,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkThreshold(
      _message: BytesLike,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    validators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loomAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold_denom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threshold_num(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPowers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLoom(
      _loomAddress: string,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setQuorum(
      _num: BigNumberish,
      _denom: BigNumberish,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rotateValidators(
      _newValidators: string[],
      _newPowers: BigNumberish[],
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    signedByValidator(
      _message: BytesLike,
      _signersIndex: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkThreshold(
      _message: BytesLike,
      _signersIndexes: BigNumberish[],
      _v: BigNumberish[],
      _r: BytesLike[],
      _s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
