/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface EthereumGatewayV1Interface extends Interface {
  functions: {
    toggleToken: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    withdrawERC20: TypedFunctionDescription<{
      encode([amount, sig, contractAddress]: [
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    loomAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    depositERC20: TypedFunctionDescription<{
      encode([amount, contractAddress]: [BigNumberish, string]): string;
    }>;

    getERC20: TypedFunctionDescription<{
      encode([contractAddress]: [string]): string;
    }>;

    numValidators: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    checkValidator: TypedFunctionDescription<{
      encode([_address]: [string]): string;
    }>;

    nonces: TypedFunctionDescription<{ encode([]: [string]): string }>;

    allowAnyToken: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    addValidator: TypedFunctionDescription<{
      encode([_validator, _v, _r, _s]: [
        string,
        BigNumberish[],
        Arrayish[],
        Arrayish[]
      ]): string;
    }>;

    nonce: TypedFunctionDescription<{ encode([]: []): string }>;

    removeValidator: TypedFunctionDescription<{
      encode([_validator, _v, _r, _s]: [
        string,
        BigNumberish[],
        Arrayish[],
        Arrayish[]
      ]): string;
    }>;

    toggleAllowAnyToken: TypedFunctionDescription<{
      encode([_allow]: [boolean]): string;
    }>;

    allowedTokens: TypedFunctionDescription<{ encode([]: [string]): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    withdrawERC721X: TypedFunctionDescription<{
      encode([tokenId, amount, sig, contractAddress]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    withdrawERC721: TypedFunctionDescription<{
      encode([uid, sig, contractAddress]: [
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    withdrawETH: TypedFunctionDescription<{
      encode([amount, sig]: [BigNumberish, Arrayish]): string;
    }>;

    onERC721XReceived: TypedFunctionDescription<{
      encode([_operator, _from, _tokenId, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC721XBatchReceived: TypedFunctionDescription<{
      encode([_operator, _from, _types, _amounts, _data]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    onERC721Received: TypedFunctionDescription<{
      encode([_operator, _from, _uid, _data]: [
        string,
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    getETH: TypedFunctionDescription<{ encode([]: []): string }>;

    getERC721: TypedFunctionDescription<{
      encode([uid, contractAddress]: [BigNumberish, string]): string;
    }>;

    getERC721X: TypedFunctionDescription<{
      encode([tokenId, contractAddress]: [BigNumberish, string]): string;
    }>;
  };

  events: {
    ETHReceived: TypedEventDescription<{
      encodeTopics([from, amount]: [null, null]): string[];
    }>;

    ERC721Received: TypedEventDescription<{
      encodeTopics([operator, from, tokenId, contractAddress, data]: [
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ERC721XReceived: TypedEventDescription<{
      encodeTopics([operator, from, tokenId, amount, contractAddress, data]: [
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ERC721XBatchReceived: TypedEventDescription<{
      encodeTopics([operator, to, tokenTypes, amounts, contractAddress, data]: [
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ERC20Received: TypedEventDescription<{
      encodeTopics([from, amount, contractAddress]: [
        null,
        null,
        null
      ]): string[];
    }>;

    TokenWithdrawn: TypedEventDescription<{
      encodeTopics([owner, kind, contractAddress, value]: [
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    LoomCoinReceived: TypedEventDescription<{
      encodeTopics([from, amount, loomCoinAddress]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    AddedValidator: TypedEventDescription<{
      encodeTopics([validator]: [null]): string[];
    }>;

    RemovedValidator: TypedEventDescription<{
      encodeTopics([validator]: [null]): string[];
    }>;

    OwnershipRenounced: TypedEventDescription<{
      encodeTopics([previousOwner]: [string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class EthereumGatewayV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): EthereumGatewayV1;
  attach(addressOrName: string): EthereumGatewayV1;
  deployed(): Promise<EthereumGatewayV1>;

  on(event: EventFilter | string, listener: Listener): EthereumGatewayV1;
  once(event: EventFilter | string, listener: Listener): EthereumGatewayV1;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): EthereumGatewayV1;
  removeAllListeners(eventName: EventFilter | string): EthereumGatewayV1;
  removeListener(eventName: any, listener: Listener): EthereumGatewayV1;

  interface: EthereumGatewayV1Interface;

  functions: {
    toggleToken(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "toggleToken(address)"(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    withdrawERC20(
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "withdrawERC20(uint256,bytes,address)"(
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    loomAddress(overrides?: UnsignedTransaction): Promise<string>;

    "loomAddress()"(overrides?: UnsignedTransaction): Promise<string>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "depositERC20(uint256,address)"(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getERC20(
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getERC20(address)"(
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    numValidators(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "numValidators()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    renounceOwnership(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    checkValidator(
      _address: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "checkValidator(address)"(
      _address: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    nonces(arg0: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    allowAnyToken(overrides?: UnsignedTransaction): Promise<boolean>;

    "allowAnyToken()"(overrides?: UnsignedTransaction): Promise<boolean>;

    owner(overrides?: UnsignedTransaction): Promise<string>;

    "owner()"(overrides?: UnsignedTransaction): Promise<string>;

    addValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "addValidator(address,uint8[],bytes32[],bytes32[])"(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    nonce(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonce()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    removeValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "removeValidator(address,uint8[],bytes32[],bytes32[])"(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "toggleAllowAnyToken(bool)"(
      _allow: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    allowedTokens(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "allowedTokens(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    transferOwnership(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "withdrawERC721X(uint256,uint256,bytes,address)"(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    withdrawERC721(
      uid: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "withdrawERC721(uint256,bytes,address)"(
      uid: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: BigNumberish,
      sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "withdrawETH(uint256,bytes)"(
      amount: BigNumberish,
      sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "onERC721XReceived(address,address,uint256,uint256,bytes)"(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "onERC721XBatchReceived(address,address,uint256[],uint256[],bytes)"(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    getETH(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getETH()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getERC721(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "getERC721(uint256,address)"(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    getERC721X(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getERC721X(uint256,address)"(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };

  toggleToken(
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "toggleToken(address)"(
    _token: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  withdrawERC20(
    amount: BigNumberish,
    sig: Arrayish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "withdrawERC20(uint256,bytes,address)"(
    amount: BigNumberish,
    sig: Arrayish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  loomAddress(overrides?: UnsignedTransaction): Promise<string>;

  "loomAddress()"(overrides?: UnsignedTransaction): Promise<string>;

  depositERC20(
    amount: BigNumberish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "depositERC20(uint256,address)"(
    amount: BigNumberish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getERC20(
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getERC20(address)"(
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  numValidators(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "numValidators()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  renounceOwnership(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  checkValidator(
    _address: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "checkValidator(address)"(
    _address: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  nonces(arg0: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  allowAnyToken(overrides?: UnsignedTransaction): Promise<boolean>;

  "allowAnyToken()"(overrides?: UnsignedTransaction): Promise<boolean>;

  owner(overrides?: UnsignedTransaction): Promise<string>;

  "owner()"(overrides?: UnsignedTransaction): Promise<string>;

  addValidator(
    _validator: string,
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "addValidator(address,uint8[],bytes32[],bytes32[])"(
    _validator: string,
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  nonce(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "nonce()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  removeValidator(
    _validator: string,
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "removeValidator(address,uint8[],bytes32[],bytes32[])"(
    _validator: string,
    _v: BigNumberish[],
    _r: Arrayish[],
    _s: Arrayish[],
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  toggleAllowAnyToken(
    _allow: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "toggleAllowAnyToken(bool)"(
    _allow: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  allowedTokens(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "allowedTokens(address)"(
    arg0: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  transferOwnership(
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  withdrawERC721X(
    tokenId: BigNumberish,
    amount: BigNumberish,
    sig: Arrayish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "withdrawERC721X(uint256,uint256,bytes,address)"(
    tokenId: BigNumberish,
    amount: BigNumberish,
    sig: Arrayish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  withdrawERC721(
    uid: BigNumberish,
    sig: Arrayish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "withdrawERC721(uint256,bytes,address)"(
    uid: BigNumberish,
    sig: Arrayish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  withdrawETH(
    amount: BigNumberish,
    sig: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "withdrawETH(uint256,bytes)"(
    amount: BigNumberish,
    sig: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  onERC721XReceived(
    _operator: string,
    _from: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "onERC721XReceived(address,address,uint256,uint256,bytes)"(
    _operator: string,
    _from: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  onERC721XBatchReceived(
    _operator: string,
    _from: string,
    _types: BigNumberish[],
    _amounts: BigNumberish[],
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "onERC721XBatchReceived(address,address,uint256[],uint256[],bytes)"(
    _operator: string,
    _from: string,
    _types: BigNumberish[],
    _amounts: BigNumberish[],
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  onERC721Received(
    _operator: string,
    _from: string,
    _uid: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    _operator: string,
    _from: string,
    _uid: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  getETH(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "getETH()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  getERC721(
    uid: BigNumberish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "getERC721(uint256,address)"(
    uid: BigNumberish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  getERC721X(
    tokenId: BigNumberish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "getERC721X(uint256,address)"(
    tokenId: BigNumberish,
    contractAddress: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  filters: {
    ETHReceived(from: null, amount: null): EventFilter;

    ERC721Received(
      operator: null,
      from: null,
      tokenId: null,
      contractAddress: null,
      data: null
    ): EventFilter;

    ERC721XReceived(
      operator: null,
      from: null,
      tokenId: null,
      amount: null,
      contractAddress: null,
      data: null
    ): EventFilter;

    ERC721XBatchReceived(
      operator: null,
      to: null,
      tokenTypes: null,
      amounts: null,
      contractAddress: null,
      data: null
    ): EventFilter;

    ERC20Received(from: null, amount: null, contractAddress: null): EventFilter;

    TokenWithdrawn(
      owner: string | null,
      kind: null,
      contractAddress: null,
      value: null
    ): EventFilter;

    LoomCoinReceived(
      from: string | null,
      amount: null,
      loomCoinAddress: null
    ): EventFilter;

    AddedValidator(validator: null): EventFilter;

    RemovedValidator(validator: null): EventFilter;

    OwnershipRenounced(previousOwner: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    toggleToken(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toggleToken(address)"(
      _token: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    withdrawERC20(
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "withdrawERC20(uint256,bytes,address)"(
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    loomAddress(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "loomAddress()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "depositERC20(uint256,address)"(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getERC20(
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getERC20(address)"(
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    numValidators(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "numValidators()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    renounceOwnership(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    checkValidator(
      _address: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "checkValidator(address)"(
      _address: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    allowAnyToken(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "allowAnyToken()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    owner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "owner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    addValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "addValidator(address,uint8[],bytes32[],bytes32[])"(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    nonce(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "nonce()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    removeValidator(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "removeValidator(address,uint8[],bytes32[],bytes32[])"(
      _validator: string,
      _v: BigNumberish[],
      _r: Arrayish[],
      _s: Arrayish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "toggleAllowAnyToken(bool)"(
      _allow: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    allowedTokens(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "allowedTokens(address)"(
      arg0: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "withdrawERC721X(uint256,uint256,bytes,address)"(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    withdrawERC721(
      uid: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "withdrawERC721(uint256,bytes,address)"(
      uid: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    withdrawETH(
      amount: BigNumberish,
      sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "withdrawETH(uint256,bytes)"(
      amount: BigNumberish,
      sig: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "onERC721XReceived(address,address,uint256,uint256,bytes)"(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "onERC721XBatchReceived(address,address,uint256[],uint256[],bytes)"(
      _operator: string,
      _from: string,
      _types: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getETH(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "getETH()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    getERC721(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getERC721(uint256,address)"(
      uid: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getERC721X(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getERC721X(uint256,address)"(
      tokenId: BigNumberish,
      contractAddress: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
