/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface EthereumGatewayV1Interface extends Interface {
  functions: {
    toggleToken: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    withdrawERC20: TypedFunctionDescription<{
      encode([amount, sig, contractAddress]: [
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    depositERC20: TypedFunctionDescription<{
      encode([amount, contractAddress]: [BigNumberish, string]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    addValidator: TypedFunctionDescription<{
      encode([_validator, _v, _r, _s]: [
        string,
        (BigNumberish)[],
        (Arrayish)[],
        (Arrayish)[]
      ]): string;
    }>;

    removeValidator: TypedFunctionDescription<{
      encode([_validator, _v, _r, _s]: [
        string,
        (BigNumberish)[],
        (Arrayish)[],
        (Arrayish)[]
      ]): string;
    }>;

    toggleAllowAnyToken: TypedFunctionDescription<{
      encode([_allow]: [boolean]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    withdrawERC721X: TypedFunctionDescription<{
      encode([tokenId, amount, sig, contractAddress]: [
        BigNumberish,
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    withdrawERC721: TypedFunctionDescription<{
      encode([uid, sig, contractAddress]: [
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    withdrawETH: TypedFunctionDescription<{
      encode([amount, sig]: [BigNumberish, Arrayish]): string;
    }>;

    onERC721XReceived: TypedFunctionDescription<{
      encode([_operator, _from, _tokenId, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC721XBatchReceived: TypedFunctionDescription<{
      encode([_operator, _from, _types, _amounts, _data]: [
        string,
        string,
        (BigNumberish)[],
        (BigNumberish)[],
        Arrayish
      ]): string;
    }>;

    onERC721Received: TypedFunctionDescription<{
      encode([_operator, _from, _uid, _data]: [
        string,
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    ETHReceived: TypedEventDescription<{
      encodeTopics([from, amount]: [null, null]): string[];
    }>;

    ERC721Received: TypedEventDescription<{
      encodeTopics([operator, from, tokenId, contractAddress, data]: [
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ERC721XReceived: TypedEventDescription<{
      encodeTopics([operator, from, tokenId, amount, contractAddress, data]: [
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ERC721XBatchReceived: TypedEventDescription<{
      encodeTopics([operator, to, tokenTypes, amounts, contractAddress, data]: [
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    ERC20Received: TypedEventDescription<{
      encodeTopics([from, amount, contractAddress]: [
        null,
        null,
        null
      ]): string[];
    }>;

    TokenWithdrawn: TypedEventDescription<{
      encodeTopics([owner, kind, contractAddress, value]: [
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    LoomCoinReceived: TypedEventDescription<{
      encodeTopics([from, amount, loomCoinAddress]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    AddedValidator: TypedEventDescription<{
      encodeTopics([validator]: [null]): string[];
    }>;

    RemovedValidator: TypedEventDescription<{
      encodeTopics([validator]: [null]): string[];
    }>;

    OwnershipRenounced: TypedEventDescription<{
      encodeTopics([previousOwner]: [string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class EthereumGatewayV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): EthereumGatewayV1;
  attach(addressOrName: string): EthereumGatewayV1;
  deployed(): Promise<EthereumGatewayV1>;

  on(event: EventFilter | string, listener: Listener): EthereumGatewayV1;
  once(event: EventFilter | string, listener: Listener): EthereumGatewayV1;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): EthereumGatewayV1;
  removeAllListeners(eventName: EventFilter | string): EthereumGatewayV1;
  removeListener(eventName: any, listener: Listener): EthereumGatewayV1;

  interface: EthereumGatewayV1Interface;

  functions: {
    getERC20(contractAddress: string): Promise<BigNumber>;

    checkValidator(_address: string): Promise<boolean>;

    nonces(arg0: string): Promise<BigNumber>;

    allowedTokens(arg0: string): Promise<boolean>;

    getERC721(uid: BigNumberish, contractAddress: string): Promise<boolean>;

    getERC721X(
      tokenId: BigNumberish,
      contractAddress: string
    ): Promise<BigNumber>;

    toggleToken(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawERC20(
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addValidator(
      _validator: string,
      _v: (BigNumberish)[],
      _r: (Arrayish)[],
      _s: (Arrayish)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeValidator(
      _validator: string,
      _v: (BigNumberish)[],
      _r: (Arrayish)[],
      _s: (Arrayish)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawERC721(
      uid: BigNumberish,
      sig: Arrayish,
      contractAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: BigNumberish,
      sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: (BigNumberish)[],
      _amounts: (BigNumberish)[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    loomAddress(): Promise<string>;
    numValidators(): Promise<BigNumber>;
    allowAnyToken(): Promise<boolean>;
    owner(): Promise<string>;
    nonce(): Promise<BigNumber>;
    getETH(): Promise<BigNumber>;
  };

  filters: {
    ETHReceived(from: null, amount: null): EventFilter;

    ERC721Received(
      operator: null,
      from: null,
      tokenId: null,
      contractAddress: null,
      data: null
    ): EventFilter;

    ERC721XReceived(
      operator: null,
      from: null,
      tokenId: null,
      amount: null,
      contractAddress: null,
      data: null
    ): EventFilter;

    ERC721XBatchReceived(
      operator: null,
      to: null,
      tokenTypes: null,
      amounts: null,
      contractAddress: null,
      data: null
    ): EventFilter;

    ERC20Received(from: null, amount: null, contractAddress: null): EventFilter;

    TokenWithdrawn(
      owner: string | null,
      kind: null,
      contractAddress: null,
      value: null
    ): EventFilter;

    LoomCoinReceived(
      from: string | null,
      amount: null,
      loomCoinAddress: null
    ): EventFilter;

    AddedValidator(validator: null): EventFilter;

    RemovedValidator(validator: null): EventFilter;

    OwnershipRenounced(previousOwner: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    toggleToken(_token: string): Promise<BigNumber>;

    withdrawERC20(
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string
    ): Promise<BigNumber>;

    depositERC20(
      amount: BigNumberish,
      contractAddress: string
    ): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    addValidator(
      _validator: string,
      _v: (BigNumberish)[],
      _r: (Arrayish)[],
      _s: (Arrayish)[]
    ): Promise<BigNumber>;

    removeValidator(
      _validator: string,
      _v: (BigNumberish)[],
      _r: (Arrayish)[],
      _s: (Arrayish)[]
    ): Promise<BigNumber>;

    toggleAllowAnyToken(_allow: boolean): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    withdrawERC721X(
      tokenId: BigNumberish,
      amount: BigNumberish,
      sig: Arrayish,
      contractAddress: string
    ): Promise<BigNumber>;

    withdrawERC721(
      uid: BigNumberish,
      sig: Arrayish,
      contractAddress: string
    ): Promise<BigNumber>;

    withdrawETH(amount: BigNumberish, sig: Arrayish): Promise<BigNumber>;

    onERC721XReceived(
      _operator: string,
      _from: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC721XBatchReceived(
      _operator: string,
      _from: string,
      _types: (BigNumberish)[],
      _amounts: (BigNumberish)[],
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC721Received(
      _operator: string,
      _from: string,
      _uid: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;
  };
}
