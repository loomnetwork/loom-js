import { Client } from './client'
import { CallTx, MessageTx, Transaction, VMType, EvmTxReceipt, Event } from './proto/loom_pb'
import { Address, LocalAddress } from './address'
import { bytesToHexAddr, numberToHex, bufferToProtobufBytes } from './crypto-utils'

interface EthReceipt {
  transactionHash: string
  transactionIndex: string
  blockHash: string
  blockNumber: string
  gasUsed: string
  cumulativeGasUsed: string
  contractAddress: string
  logs: Array<any>
  status: string
}

/**
 * Web3 provider that interacts with EVM contracts deployed on Loom DAppChains.
 */
export class LoomProvider {
  // Satisfy the provider requirement
  responseCallbacks: any = null
  notificationCallbacks: any = null
  connection: any = null
  addDefaultEvents: any = null
  on: any = null
  removeListener: any = null
  removeAllListeners: any = null
  reset: any = null

  private _client: Client

  /**
   * @param client: The client which calls Ethereum EVM
   */
  constructor(client: Client) {
    this._client = client
  }

  /**
   * Should be used to make async request
   * This method is used internally by web3, so we adapt it to be used with loom contract
   * when we are wrapping the evm on a DAppChain
   * @param payload JSON payload generated by web3 which will be translated to loom transaction/call
   * @param callback Triggered on end with (err, result)
   */
  async send(payload: any, callback: Function) {
    // Methods frequently called by web3js added just to follow the web3 requirements
    const okMethods = ['eth_estimateGas', 'eth_gasPrice']

    /**
     * NOTE: _okResponse and okMethods array are mocks, only to allow web3js think that is talking
     * to an Ethereum Node
     */

    // Ok just avoids web3js issues
    if (okMethods.indexOf(payload.method) !== -1) {
      callback(null, this._okResponse())
    }

    // Sending transaction to Loom DAppChain
    else if (payload.method === 'eth_sendTransaction') {
      try {
        const result = await this._callAsync(payload.params[0])
        callback(null, this._okResponse(bytesToHexAddr(result)))
      } catch (err) {
        callback(err, null)
      }
    }

    // Sending a static call to Loom DAppChain
    else if (payload.method === 'eth_call') {
      try {
        const result = await this._callStaticAsync(payload.params[0])
        callback(null, this._okResponse(bytesToHexAddr(result)))
      } catch (err) {
        callback(err, null)
      }
    }

    // Required to avoid web3js error, because web3js always want to know about a transaction
    else if (payload.method === 'eth_getTransactionReceipt') {
      try {
        const result = await this._getReceipt(payload.params[0])
        callback(null, this._okResponse(result))
      } catch (err) {
        callback(err, null)
      }
    }

    // Warn the user about we don't support other methods
    else {
      callback(Error(`Method "${payload.method}" not supported on this provider`), null)
    }
  }

  private _callAsync(payload: { to: string; from: string; data: string }): Promise<any> {
    const caller = new Address(this._client.chainId, LocalAddress.fromHexString(payload.from))
    const address = new Address(this._client.chainId, LocalAddress.fromHexString(payload.to))
    const data = Buffer.from(payload.data.substring(2), 'hex')

    const callTx = new CallTx()
    callTx.setVmType(VMType.EVM)
    callTx.setInput(bufferToProtobufBytes(data))

    const msgTx = new MessageTx()
    msgTx.setFrom(caller.MarshalPB())
    msgTx.setTo(address.MarshalPB())
    msgTx.setData(callTx.serializeBinary())

    const tx = new Transaction()
    tx.setId(2)
    tx.setData(msgTx.serializeBinary())

    return this._client.commitTxAsync<Transaction>(tx)
  }

  private _callStaticAsync(payload: { to: string; data: string }): Promise<any> {
    const address = new Address(this._client.chainId, LocalAddress.fromHexString(payload.to))
    const data = Buffer.from(payload.data.substring(2), 'hex')
    return this._client.queryAsync(address, data, VMType.EVM)
  }

  private async _getReceipt(txHash: string): Promise<EthReceipt> {
    const data = Buffer.from(txHash.substring(2), 'hex')
    const result = await this._client.getTxReceiptAsync(bufferToProtobufBytes(data))
    const receipt = EvmTxReceipt.deserializeBinary(bufferToProtobufBytes(result as Uint8Array))
    const transactionHash = '0x0000000000000000000000000000000000000000000000000000000000000000'
    const transactionIndex = numberToHex(receipt.getTransactionindex())
    const blockHash = bytesToHexAddr(receipt.getBlockhash_asU8())
    const blockNumber = numberToHex(receipt.getBlocknumber())
    const contractAddress = bytesToHexAddr(receipt.getContractaddress_asU8())

    const logs = receipt.getLogsList().map((logEvent: Event, index: number) => {
      const logIndex = numberToHex(index)

      return {
        logIndex,
        address: contractAddress,
        blockHash,
        blockNumber,
        transactionHash,
        transactionIndex,
        type: 'mined',
        data: bytesToHexAddr(logEvent.getData_asU8()).toLowerCase(),
        topics: logEvent.getTopicsList_asU8().map((topic: Uint8Array) => bytesToHexAddr(topic).toLowerCase())
      }
    })

    return {
      transactionHash,
      transactionIndex,
      blockHash,
      blockNumber,
      contractAddress,
      gasUsed: numberToHex(receipt.getGasused()),
      cumulativeGasUsed: numberToHex(receipt.getCumulativegasused()),
      logs,
      status: numberToHex(receipt.getStatus()),
    } as EthReceipt
  }

  // Basic response to web3js
  private _okResponse(result: any = 0): any {
    return { id: 0, jsonrpc: '2.0', result }
  }
}
