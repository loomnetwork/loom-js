import debug from 'debug'
import { Client, ClientEvent, IChainEventArgs } from './client'
import { createDefaultTxMiddleware } from './helpers'
import {
  CallTx,
  MessageTx,
  Transaction,
  VMType,
  DeployTx,
  DeployResponse,
  DeployResponseData,
  EventData,
  EthFilterLog,
  EthFilterLogList
} from './proto/loom_pb'
import { Address, LocalAddress } from './address'
import {
  bytesToHexAddr,
  numberToHex,
  bufferToProtobufBytes,
  getGUID,
  publicKeyFromPrivateKey
} from './crypto-utils'

export interface IEthReceipt {
  transactionHash: string
  transactionIndex: string
  blockHash: string
  blockNumber: string
  gasUsed: string
  cumulativeGasUsed: string
  contractAddress: string
  logs: Array<any>
  status: string
}

const log = debug('loom-provider')

const bytesToHexAddrLC = (bytes: Uint8Array): string => {
  return bytesToHexAddr(bytes).toLowerCase()
}

const numberToHexLC = (num: number): string => {
  return numberToHex(num).toLowerCase()
}

/**
 * Web3 provider that interacts with EVM contracts deployed on Loom DAppChains.
 */
export class LoomProvider {
  private _client: Client
  private _topicsList: Array<string>
  protected notificationCallbacks: Array<Function>
  readonly accounts: Map<string, Uint8Array>
  readonly accountsAddrList: Array<string>

  /**
   * Constructs the LoomProvider to bridges communication between Web3 and Loom DappChains
   *
   * @param client Client from LoomJS
   * @param privateKey Account private key
   */
  constructor(client: Client, privateKey: Uint8Array) {
    this._client = client
    this._topicsList = []
    this.notificationCallbacks = new Array()
    this.accounts = new Map<string, Uint8Array>()
    this.accountsAddrList = new Array()

    this._client.addListener(ClientEvent.Contract, (msg: IChainEventArgs) =>
      this._onWebSocketMessage(msg)
    )

    this.addDefaultEvents()
    this.addAccounts([privateKey])
  }

  /**
   * Creates new accounts by passing the private key array
   *
   * Accounts will be available on public properties accounts and accountsAddrList
   *
   * @param accountsPrivateKey Array of private keys to create new accounts
   */
  addAccounts(accountsPrivateKey: Array<Uint8Array>) {
    accountsPrivateKey.forEach(accountPrivateKey => {
      const publicKey = publicKeyFromPrivateKey(accountPrivateKey)
      const accountAddress = LocalAddress.fromPublicKey(publicKey).toString()
      this.accountsAddrList.push(accountAddress)
      this.accounts.set(accountAddress, accountPrivateKey)
      log(`New account added ${accountAddress}`)
    })
  }

  // PUBLIC FUNCTION TO SUPPORT WEB3

  on(type: string, callback: any) {
    switch (type) {
      case 'data':
        this.notificationCallbacks.push(callback)
        break
      case 'connect':
        this._client.addListener(ClientEvent.Connected, callback)
        break
      case 'end':
        this._client.addListener(ClientEvent.Disconnected, callback)
        break
      case 'error':
        this._client.addListener(ClientEvent.Error, callback)
        break
    }
  }

  addDefaultEvents() {
    this._client.addListener(ClientEvent.Disconnected, () => {
      // reset all requests and callbacks
      this.reset()
    })
  }

  removeListener(type: string, callback: (...args: any[]) => void) {
    switch (type) {
      case 'data':
        this.notificationCallbacks = []
        break
      case 'connect':
        this._client.removeListener(ClientEvent.Connected, callback)
        break
      case 'end':
        this._client.removeListener(ClientEvent.Disconnected, callback)
        break
      case 'error':
        this._client.removeListener(ClientEvent.Error, callback)
        break
    }
  }

  removeAllListeners(type: string, callback: Function) {
    if (type === 'data') {
      this.notificationCallbacks.forEach((cb, index) => {
        if (cb === callback) {
          this.notificationCallbacks.splice(index, 1)
        }
      })
    }
  }

  reset() {
    this._topicsList = []
    this.notificationCallbacks = []
  }

  disconnect() {
    this._client.disconnect()
  }

  // Adapter function for sendAsync from truffle provider
  async sendAsync(payload: any, callback?: Function): Promise<any | void> {
    if (callback) {
      await this.send(payload, callback)
    } else {
      return new Promise((resolve, reject) => {
        this.send(payload, (err: Error, result: any) => {
          if (err) reject(err)
          else resolve(result)
        })
      })
    }
  }

  /**
   * Should be used to make async request
   * This method is used internally by web3, so we adapt it to be used with loom contract
   * when we are wrapping the evm on a DAppChain
   * @param payload JSON payload generated by web3 which will be translated to loom transaction/call
   * @param callback Triggered on end with (err, result)
   */
  async send(payload: any, callback: Function) {
    log('Request payload', JSON.stringify(payload, null, 2))

    // TODO: Must process like array sequences like a map of requests and push results inside an array
    const isArray = Array.isArray(payload)
    if (isArray) {
      payload = payload[0]
    }

    // Methods frequently called by web3js added just to follow the web3 requirements
    const okMethods = ['eth_estimateGas', 'eth_gasPrice', 'eth_blockNumber']

    /**
     * NOTE: _okResponse and okMethods array are mocks, only to allow web3js think that is talking
     * to an Ethereum Node
     */

    // Ok just avoids web3js issues
    if (okMethods.indexOf(payload.method) !== -1) {
      return callback(null, this._okResponse(payload.id, null, isArray))
    }

    switch (payload.method) {
      case 'net_version':
        // TODO: Create call for supply on Loom DappChain
        // Fixed network version 474747
        callback(null, this._okResponse(payload.id, '474747', isArray))
        break
      case 'eth_accounts':
        if (this.accountsAddrList.length === 0) {
          throw Error('No account available')
        }
        callback(null, this._okResponse(payload.id, this.accountsAddrList, isArray))
        break
      case 'eth_newBlockFilter':
        // Simulate subscribe for new block filter
        // TODO: Create call for supply on Loom DappChain
        const GUIDHex = Buffer.from(getGUID()).toString('hex')
        callback(null, this._okResponse(payload.id, `0x${GUIDHex}`, isArray))
        break
      case 'eth_getBlockByNumber':
        // Simulate get block by number
        // TODO: Create call for supply on Loom DappChain
        callback(null, this._okResponse(payload.id, this._simulateEmptyBlock(), isArray))
        break
      case 'eth_getFilterChanges':
        // Simulate return from block filter
        // TODO: Create call for supply on Loom DappChain
        callback(null, [
          this._okResponse(payload.id, [
            '0x0000000000000000000000000000000000000000000000000000000000000001'
          ])
        ])
        break
      case 'eth_sendTransaction':
        // Sending transaction to Loom DAppChain
        try {
          let result

          if (payload.params[0].to) {
            result = await this._callAsync(payload.params[0])
          } else {
            result = await this._deployAsync(payload.params[0])
          }

          callback(null, this._okResponse(payload.id, bytesToHexAddrLC(result), isArray))
        } catch (err) {
          callback(err, null)
        }
        break
      case 'eth_getCode':
        try {
          const result = await this._getCode(payload.params[0])
          callback(null, this._okResponse(payload.id, bytesToHexAddrLC(result), isArray))
        } catch (err) {
          callback(err, null)
        }
        break
      case 'eth_call':
        // Sending a static call to Loom DAppChain
        try {
          const result = await this._callStaticAsync(payload.params[0])
          callback(null, this._okResponse(payload.id, bytesToHexAddrLC(result), isArray))
        } catch (err) {
          callback(err, null)
        }
        break
      case 'eth_getTransactionReceipt':
        try {
          const result = await this._getReceipt(payload.params[0])
          callback(null, this._okResponse(payload.id, result, isArray))
        } catch (err) {
          callback(err, null)
        }
        break
      case 'eth_subscribe':
        // Required to avoid web3js error, because web3js always want to know about a transaction
        if (payload.params[0] === 'logs') {
          this._topicsList = this._topicsList.concat(payload.params[1].topics)
          callback(null, this._okResponse(payload.id, payload.params[1].topics[0], isArray))
        } else {
          callback(null, this._okResponse(payload.id, [], isArray))
        }
        break
      case 'eth_uninstallFilter':
        // TODO: Create call for supply on Loom DappChain
        callback(null, this._okResponse(payload.id, true, isArray))
        break
      case 'eth_getLogs':
        try {
          const result = await this._getLogs(JSON.stringify(payload.params[0]))
          callback(null, this._okResponse(payload.id, result, isArray))
        } catch (err) {
          callback(err, null)
        }
        break
      default:
        // Warn the user about we don't support other methods
        callback(Error(`Method "${payload.method}" not supported on this provider`), null)
        break
    }
  }

  // PRIVATE FUNCTIONS

  private _getCode(contractAddress: string): Promise<any> {
    const address = new Address(this._client.chainId, LocalAddress.fromHexString(contractAddress))
    return this._client.getCodeAsync(address)
  }

  private async _deployAsync(payload: { from: string; data: string }): Promise<any> {
    const caller = new Address(this._client.chainId, LocalAddress.fromHexString(payload.from))
    const address = new Address(
      this._client.chainId,
      LocalAddress.fromHexString('0x0000000000000000000000000000000000000000')
    )

    const data = Buffer.from(payload.data.substring(2), 'hex')

    const deployTx = new DeployTx()
    deployTx.setVmType(VMType.EVM)
    deployTx.setCode(bufferToProtobufBytes(data))

    const msgTx = new MessageTx()
    msgTx.setFrom(caller.MarshalPB())
    msgTx.setTo(address.MarshalPB())
    msgTx.setData(deployTx.serializeBinary())

    const tx = new Transaction()
    tx.setId(1)
    tx.setData(msgTx.serializeBinary())

    const ret = await this._commitTransaction(payload.from, tx)
    const response = DeployResponse.deserializeBinary(bufferToProtobufBytes(ret as Uint8Array))
    const responseData = DeployResponseData.deserializeBinary(
      bufferToProtobufBytes(response.getOutput_asU8())
    )

    return responseData.getTxHash_asU8()
  }

  private _callAsync(payload: { to: string; from: string; data: string }): Promise<any> {
    const caller = new Address(this._client.chainId, LocalAddress.fromHexString(payload.from))
    const address = new Address(this._client.chainId, LocalAddress.fromHexString(payload.to))
    const data = Buffer.from(payload.data.substring(2), 'hex')

    const callTx = new CallTx()
    callTx.setVmType(VMType.EVM)
    callTx.setInput(bufferToProtobufBytes(data))

    const msgTx = new MessageTx()
    msgTx.setFrom(caller.MarshalPB())
    msgTx.setTo(address.MarshalPB())
    msgTx.setData(callTx.serializeBinary())

    const tx = new Transaction()
    tx.setId(2)
    tx.setData(msgTx.serializeBinary())

    return this._commitTransaction(payload.from, tx)
  }

  private _callStaticAsync(payload: { to: string; from: string; data: string }): Promise<any> {
    const caller = new Address(this._client.chainId, LocalAddress.fromHexString(payload.from))
    const address = new Address(this._client.chainId, LocalAddress.fromHexString(payload.to))
    const data = Buffer.from(payload.data.substring(2), 'hex')
    return this._client.queryAsync(address, data, VMType.EVM, caller)
  }

  private async _getReceipt(txHash: string): Promise<IEthReceipt> {
    const data = Buffer.from(txHash.substring(2), 'hex')
    const receipt = await this._client.getTxReceiptAsync(bufferToProtobufBytes(data))
    if (!receipt) {
      throw Error('Receipt cannot be empty')
    }
    const transactionHash = txHash
    const transactionIndex = numberToHexLC(receipt.getTransactionIndex())
    const blockHash = bytesToHexAddrLC(receipt.getBlockHash_asU8())
    const blockNumber = numberToHexLC(receipt.getBlockNumber())
    const contractAddress = bytesToHexAddrLC(receipt.getContractAddress_asU8())
    const logs = receipt.getLogsList().map((logEvent: EventData, index: number) => {
      const logIndex = numberToHexLC(index)

      return {
        logIndex,
        address: contractAddress,
        blockHash,
        blockNumber,
        transactionHash: bytesToHexAddrLC(logEvent.getTxHash_asU8()),
        transactionIndex,
        type: 'mined',
        data: bytesToHexAddrLC(logEvent.getEncodedBody_asU8()),
        topics: logEvent.getTopicsList().map((topic: string) => topic.toLowerCase())
      }
    })

    return {
      transactionHash,
      transactionIndex,
      blockHash,
      blockNumber,
      contractAddress,
      gasUsed: numberToHexLC(receipt.getGasUsed()),
      cumulativeGasUsed: numberToHexLC(receipt.getCumulativeGasUsed()),
      logs,
      status: numberToHexLC(receipt.getStatus())
    } as IEthReceipt
  }

  private async _getLogs(filter: string): Promise<any> {
    const logsListAsyncResult = await this._client.getEVMLogsAsync(filter)
    if (!logsListAsyncResult) {
      return []
    }

    const logList = EthFilterLogList.deserializeBinary(bufferToProtobufBytes(logsListAsyncResult))
    return logList.getEthBlockLogsList().map((log: EthFilterLog) => {
      return {
        removed: log.getRemoved(),
        logIndex: numberToHexLC(log.getLogIndex()),
        transactionIndex: numberToHex(log.getTransactionIndex()),
        transactionHash: bytesToHexAddrLC(log.getTransactionHash_asU8()),
        blockHash: bytesToHexAddrLC(log.getBlockHash_asU8()),
        blockNumber: numberToHex(log.getBlockNumber()),
        address: bytesToHexAddrLC(log.getAddress_asU8()),
        data: bytesToHexAddrLC(log.getData_asU8()),
        topics: log.getTopicsList().map((topic: any) => String.fromCharCode.apply(null, topic))
      }
    })
  }

  private _onWebSocketMessage(msgEvent: IChainEventArgs) {
    if (msgEvent.data) {
      log(`Socket message arrived ${msgEvent}`)
      this.notificationCallbacks.forEach((callback: Function) => {
        const topicIdxFound = this._topicsList.indexOf(msgEvent.topics[0])

        if (topicIdxFound !== -1) {
          const topicFound = this._topicsList[topicIdxFound]
          const JSONRPCResult = {
            jsonrpc: '2.0',
            method: 'eth_subscription',
            params: {
              // TODO: This ID Should came from loomchain events
              subscription: topicFound,
              result: {
                transactionHash: msgEvent.transactionHash,
                address: msgEvent.contractAddress.local.toString(),
                type: 'mined',
                data: bytesToHexAddrLC(msgEvent.data),
                topics: msgEvent.topics
              }
            }
          }

          callback(JSONRPCResult)
        }
      })
    }
  }

  private async _commitTransaction(
    fromPublicAddr: string,
    txTransaction: Transaction
  ): Promise<Uint8Array | void> {
    const privateKey = this.accounts.get(fromPublicAddr)

    if (!privateKey) {
      throw Error(`Account not found for address ${fromPublicAddr}`)
    }

    const middleware = createDefaultTxMiddleware(this._client, privateKey)
    return this._client.commitTxAsync<Transaction>(txTransaction, { middleware })
  }

  private _simulateEmptyBlock(block: any = {}) {
    return Object.assign(
      {
        number: '0x0',
        hash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
        mixHash: '0x1010101010101010101010101010101010101010101010101010101010101010',
        nonce: '0x0000000000000000',
        sha3Uncles: '0x0000000000000000000000000000000000000000000000000000000000000000',
        logsBloom:
          '0x
        transactionsRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
        stateRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
        receiptsRoot: '0x0000000000000000000000000000000000000000000000000000000000000000',
        miner: '0x0000000000000000000000000000000000000000',
        difficulty: '0x0',
        totalDifficulty: '0x0',
        extraData: '0x00',
        size: '0x0',
        gasLimit: '0x0',
        gasUsed: '0x0',
        timestamp: '0x0',
        transactions: []
      },
      block
    )
  }

  // Basic response to web3js
  private _okResponse(id: string, result: any = 0, isArray: boolean = false): any {
    const response = { id, jsonrpc: '2.0', result }
    const ret = isArray ? [response] : response
    log('Response payload', JSON.stringify(ret, null, 2))
    return ret
  }
}
