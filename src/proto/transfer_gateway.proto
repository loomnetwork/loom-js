syntax = "proto3";

import "proto/loom.proto";

// Events emitted by the contract

message TransferGatewayContractMappingConfirmed {
    // Address of a contract on a foreign blockchain
    Address foreign_contract = 1;
    // Address of corresponding contract on the local blockchain
    Address local_contract = 2;
}

// Emitted when a withdrawal to the Mainnet Gateway has been signed.
// This event contains all the required data to complete a toke withdrawal via the Mainnet Gateway.
message TransferGatewayTokenWithdrawalSigned {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract, blank if ETH
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // ERC721 token ID, or amount of ERC20/ETH
    BigUInt value = 4;
    // Oracle signature
    bytes sig = 5;
}

// Messages

enum TransferGatewayTokenKind {
    ETH = 0;
    ERC20 = 1;
    ERC721 = 2;
}

message TransferGatewayWithdrawalReceipt {
    // Mainnet address of token owner
    Address token_owner = 1;
    // Mainnet address of token contract
    Address token_contract = 2;
    TransferGatewayTokenKind token_kind = 3;
    // // ERC721 token ID, or amount of ERC20/ETH
    BigUInt value = 4;
    uint64 withdrawal_nonce = 5 [jstype = JS_STRING];
    // Signature generated by the Oracle that confirmed the withdrawal
    bytes oracle_signature = 6;
}

message TransferGatewayWithdrawERC721Request {
    // ID of ERC721 token
    BigUInt token_id = 1;
    // DAppChain address of ERC721 contract token belongs to
    Address token_contract = 2;
    // DAppChain address of the current owner of the token
    //Address token_owner = 3;
}

message TransferGatewayWithdrawalReceiptRequest {
    Address owner = 1;
}

message TransferGatewayWithdrawalReceiptResponse {
    TransferGatewayWithdrawalReceipt receipt = 1;
}

message TransferGatewayConfirmWithdrawalReceiptRequest {
    // DAppChain address of the entity attempting to make the withdrawal
    Address token_owner = 1;
    // 66-byte hash of the withdrawal hash
    bytes oracle_signature = 2;
    // 32-byte hash of the withdrawal details
    bytes withdrawal_hash = 3; // TODO: figure out if there's any point passing this around
}

message TransferGatewayAddContractMappingRequest {
    // Address on foreign blockchain
    Address foreign_contract = 1;
    // Corresponding address on local blockchain
    Address local_contract = 2;
    // Signature of the creator of the foreign contract
    bytes foreign_contract_creator_sig = 3;
    // Hash of the transaction which created the foreign contract
    bytes foreign_contract_tx_hash = 4;
}
