import BN from 'bn.js'
import { Client } from '../client'
import { Contract } from '../contract'
import { Address } from '../address'
import {
  TransferGatewayWithdrawTokenRequest,
  TransferGatewayWithdrawETHRequest,
  TransferGatewayWithdrawalReceiptRequest,
  TransferGatewayWithdrawalReceiptResponse,
  TransferGatewayTokenKind,
  TransferGatewayAddContractMappingRequest,
  TransferGatewayTokenWithdrawalSigned,
  TransferGatewayContractMappingConfirmed
} from '../proto/transfer_gateway_pb'
import { marshalBigUIntPB, unmarshalBigUIntPB } from '../big-uint'
import { B64ToUint8Array } from '../crypto-utils'

export interface IWithdrawalReceipt {
  tokenOwner: Address
  // Mainnet address of token contract
  tokenContract: Address
  tokenKind: TransferGatewayTokenKind
  // ERC721/X token ID
  tokenId?: BN
  // ERC721X/ERC20/ETH amount
  tokenAmount?: BN
  withdrawalNonce: BN
  // Signature generated by the Oracle that confirmed the withdrawal
  oracleSignature: Uint8Array

  // Deprecated, use tokenId and tokenAmount instead.
  // This is the ERC721 token ID, or ERC721X/ERC20/ETH amount.
  value: BN
}

export interface ITokenWithdrawalEventArgs {
  tokenOwner: Address
  // Mainnet address of token contract, blank if ETH
  tokenContract: Address
  tokenKind: TransferGatewayTokenKind
  // ERC721/X token ID
  tokenId?: BN
  // ERC721X/ERC20/ETH amount
  tokenAmount?: BN
  // Oracle signature
  sig: Uint8Array

  // Deprecated, use tokenId and tokenAmount instead.
  // This is the ERC721 token ID, or ERC721X/ERC20/ETH amount.
  value: BN
}

export interface IContractMappingConfirmedEventArgs {
  // Address of a contract on a foreign blockchain
  foreignContract: Address
  // Address of corresponding contract on the local blockchain
  localContract: Address
}

export class TransferGateway extends Contract {
  // LoomJS user events
  static readonly EVENT_TOKEN_WITHDRAWAL = 'event_token_withdrawal'
  static readonly EVENT_CONTRACT_MAPPING_CONFIRMED = 'event_contract_mapping_confirmed'

  // Events from Loomchain
  static readonly tokenWithdrawalSignedEventTopic: String = 'event:TokenWithdrawalSigned'
  static readonly contractMappingConfirmedEventTopic: String = 'event:ContractMappingConfirmed'

  static async createAsync(client: Client, callerAddr: Address): Promise<TransferGateway> {
    const contractAddr = await client.getContractAddressAsync('gateway')
    if (!contractAddr) {
      throw Error('Failed to resolve contract address for TransferGateway')
    }

    return new TransferGateway({ contractAddr, callerAddr, client })
  }

  constructor(params: { contractAddr: Address; callerAddr: Address; client: Client }) {
    super(params)

    this.on(Contract.EVENT, event => {
      if (!event.topics || event.topics.length === 0) {
        return
      }

      if (event.topics[0] === TransferGateway.tokenWithdrawalSignedEventTopic) {
        const eventData = TransferGatewayTokenWithdrawalSigned.deserializeBinary(
          B64ToUint8Array(event.data)
        )

        let tokenId: BN | undefined, tokenAmount: BN | undefined, value: BN
        const tokenKind = eventData.getTokenKind()
        switch (tokenKind) {
          case TransferGatewayTokenKind.ERC721:
            tokenId = unmarshalBigUIntPB(eventData.getTokenId()!)
            value = tokenId
            break
          case TransferGatewayTokenKind.ERC721X:
            tokenId = unmarshalBigUIntPB(eventData.getTokenId()!)
          // fallthrough
          default:
            tokenAmount = unmarshalBigUIntPB(eventData.getTokenAmount()!)
            value = tokenAmount
            break
        }

        this.emit(TransferGateway.EVENT_TOKEN_WITHDRAWAL, {
          tokenOwner: Address.UmarshalPB(eventData.getTokenOwner()!),
          tokenContract: Address.UmarshalPB(eventData.getTokenContract()!),
          tokenKind,
          tokenId,
          tokenAmount,
          sig: eventData.getSig_asU8(),
          value
        } as ITokenWithdrawalEventArgs)
      } else if (event.topics[0] === TransferGateway.contractMappingConfirmedEventTopic) {
        const contractMappingConfirmed = TransferGatewayContractMappingConfirmed.deserializeBinary(
          B64ToUint8Array(event.data)
        )

        this.emit(TransferGateway.EVENT_CONTRACT_MAPPING_CONFIRMED, {
          foreignContract: Address.UmarshalPB(contractMappingConfirmed.getForeignContract()!),
          localContract: Address.UmarshalPB(contractMappingConfirmed.getLocalContract()!)
        } as IContractMappingConfirmedEventArgs)
      }
    })
  }

  addContractMappingAsync(params: {
    foreignContract: Address
    localContract: Address
    foreignContractCreatorSig: Uint8Array
    foreignContractCreatorTxHash: Uint8Array
  }): Promise<void> {
    const {
      foreignContract,
      localContract,
      foreignContractCreatorSig,
      foreignContractCreatorTxHash
    } = params

    const mappingContractRequest = new TransferGatewayAddContractMappingRequest()
    mappingContractRequest.setForeignContract(foreignContract.MarshalPB())
    mappingContractRequest.setLocalContract(localContract.MarshalPB())
    mappingContractRequest.setForeignContractCreatorSig(foreignContractCreatorSig)
    mappingContractRequest.setForeignContractTxHash(foreignContractCreatorTxHash)

    return this.callAsync<void>('AddContractMapping', mappingContractRequest)
  }

  withdrawERC721Async(tokenId: BN, tokenContract: Address): Promise<void> {
    const req = new TransferGatewayWithdrawTokenRequest()
    req.setTokenKind(TransferGatewayTokenKind.ERC721)
    req.setTokenId(marshalBigUIntPB(tokenId))
    req.setTokenContract(tokenContract.MarshalPB())

    return this.callAsync<void>('WithdrawToken', req)
  }

  withdrawERC721XAsync(tokenId: BN, amount: BN, tokenContract: Address): Promise<void> {
    const req = new TransferGatewayWithdrawTokenRequest()
    req.setTokenKind(TransferGatewayTokenKind.ERC721X)
    req.setTokenId(marshalBigUIntPB(tokenId))
    req.setTokenAmount(marshalBigUIntPB(amount))
    req.setTokenContract(tokenContract.MarshalPB())

    return this.callAsync<void>('WithdrawToken', req)
  }

  withdrawERC20Async(amount: BN, tokenContract: Address): Promise<void> {
    const req = new TransferGatewayWithdrawTokenRequest()
    req.setTokenKind(TransferGatewayTokenKind.ERC20)
    req.setTokenAmount(marshalBigUIntPB(amount))
    req.setTokenContract(tokenContract.MarshalPB())

    return this.callAsync<void>('WithdrawToken', req)
  }

  withdrawETHAsync(amount: BN, mainNetGateway: Address): Promise<void> {
    const tgWithdrawETHReq = new TransferGatewayWithdrawETHRequest()
    tgWithdrawETHReq.setAmount(marshalBigUIntPB(amount))
    tgWithdrawETHReq.setMainnetGateway(mainNetGateway.MarshalPB())

    return this.callAsync<void>('WithdrawETH', tgWithdrawETHReq)
  }

  async withdrawalReceiptAsync(owner: Address): Promise<IWithdrawalReceipt | null> {
    const tgWithdrawReceiptReq = new TransferGatewayWithdrawalReceiptRequest()
    tgWithdrawReceiptReq.setOwner(owner.MarshalPB())

    const result = await this.staticCallAsync(
      'WithdrawalReceipt',
      tgWithdrawReceiptReq,
      new TransferGatewayWithdrawalReceiptResponse()
    )

    const receipt = result.getReceipt()

    if (receipt) {
      let tokenId: BN | undefined, tokenAmount: BN | undefined, value: BN
      const tokenKind = receipt.getTokenKind()
      switch (tokenKind) {
        case TransferGatewayTokenKind.ERC721:
          tokenId = unmarshalBigUIntPB(receipt.getTokenId()!)
          value = tokenId
          break
        case TransferGatewayTokenKind.ERC721X:
          tokenId = unmarshalBigUIntPB(receipt.getTokenId()!)
        // fallthrough
        default:
          tokenAmount = unmarshalBigUIntPB(receipt.getTokenAmount()!)
          value = tokenAmount
          break
      }
      return {
        tokenOwner: Address.UmarshalPB(receipt.getTokenOwner()!),
        tokenContract: Address.UmarshalPB(receipt.getTokenContract()!),
        tokenKind,
        tokenId,
        tokenAmount,
        withdrawalNonce: new BN(receipt.getWithdrawalNonce()!),
        oracleSignature: receipt.getOracleSignature_asU8(),
        value
      }
    }
    return null
  }
}
